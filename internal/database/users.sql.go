// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at, email,hashed_password) VALUES(
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
) RETURNING id,created_at,updated_at,email
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getHashedPasswordByID = `-- name: GetHashedPasswordByID :one
SELECT hashed_password FROM users WHERE id = $1
`

func (q *Queries) GetHashedPasswordByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashedPasswordByID, id)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,created_at,updated_at,email FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const resetUserTable = `-- name: ResetUserTable :exec
DELETE FROM users
`

func (q *Queries) ResetUserTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUserTable)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $1,
hashed_password = $2,
updated_at = NOW()
WHERE id = $3
RETURNING id,created_at,updated_at,email
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	UserID         uuid.UUID
}

type UpdateUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.UserID)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}
