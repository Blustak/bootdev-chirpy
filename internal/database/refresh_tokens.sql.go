// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addRefreshToken = `-- name: AddRefreshToken :one
INSERT INTO refresh_tokens(
    token,
    created_at,
    updated_at,
    user_id,
    expires_at,
    revoked_at
    ) VALUES(
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + interval '60 days',
    NULL
) RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type AddRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, addRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token,expires_at,revoked_at FROM refresh_tokens WHERE token = $1
`

type GetRefreshTokenRow struct {
	Token     string
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT users.id,
refresh_tokens.token,
refresh_tokens.expires_at,
refresh_tokens.revoked_at
FROM users
LEFT JOIN refresh_tokens
ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = $1
`

type GetUserByRefreshTokenRow struct {
	ID        uuid.UUID
	Token     sql.NullString
	ExpiresAt sql.NullTime
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (GetUserByRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, token)
	var i GetUserByRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET revoked_at = NOW(), updated_at = NOW() WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
